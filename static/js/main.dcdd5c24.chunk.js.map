{"version":3,"sources":["flashcards/Flashcard.js","flashcards/Flashcards.js","App.js","serviceWorker.js","index.js"],"names":["Flashcard","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleToggle","toggleFlip","state","setState","bgImageStyle","source","type","backgroundImage","concat","imageURL","baseStyle","backStyle","react_default","a","createElement","onClick","className","style","zIndex","aria-hidden","role","tabIndex","aria-label","title","xmlns","width","height","viewBox","focusable","fillRule","d","content","React","Component","Flashcards","cardList","map","card","Flashcard_Flashcard","key","id","paddingTop","paddingBottom","data","JSON","stringify","dummyData","sampleData","parse","App","console","log","Flashcards_Flashcards","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.dcdd5c24.chunk.js","sourcesContent":["import React from 'react';\n\n\nexport default class Flashcard extends React.Component{\n\n    constructor(props) {\n\t\tsuper(props);\n\t\tthis.state = {\n\t\t\ttoggleFlip:false\n\t\t}\n    }\n    \n    handleToggle=()=>{\n        const {toggleFlip} = this.state;\n        this.setState({\n            toggleFlip: !toggleFlip\n        })\n    }\n\n\n    render(){\n        \n        const {source} = this.props;\n        const {toggleFlip} = this.state;\n        let bgImageStyle;\n\n        if(source.type === \"media\"){\n          bgImageStyle={\n                \"backgroundImage\": `url(${source.imageURL})`\n            }\n        }\n\n        const flipStyle=\"block-flashcard--flipped\";\n        const baseStyle=\"block-flashcard block-flashcard--small\";\n\n        let backStyle =\"block-flashcard__center brand--linkColor\";\n       \n        if(source.type===\"longtext\"){\n            backStyle=\"block-flashcard__center brand--linkColor block-flashcard__center--long block-flashcard__center--long--back block-flashcard__center--overflow\";\n       \n        }\n        \n\n       \n        return(\n\n            <section onClick={this.handleToggle} className={toggleFlip ? baseStyle+\" \"+flipStyle : baseStyle} style={toggleFlip ?{\"zIndex\": \"1\"} : {\"zIndex\": \"0\"}}>\n            <div className=\"block-flashcard__wrapper\">\n                <div aria-hidden={toggleFlip ? \"true\" : \"false\"} className=\"block-flashcard__front block-flashcard__front--description\" role=\"button\" tabIndex={toggleFlip ? \"-1\":\"0\"}>\n                    <div className=\"block-flashcard__content brand--border\">\n                        <div className=\"block-flashcard__center brand--linkColor\" aria-label={source.title}>\n                            <div aria-hidden=\"false\" className=\"block-flashcard__description brand--head brand--linkColor\">\n                                <div className=\"fr-view\">{source.title}</div>\n                            </div>\n                        </div>\n                    </div>\n                    <button className=\"block-flashcard__flip brand--ui\" tabIndex=\"-1\"><span className=\"flip-text\"></span><span className=\"flip-icon\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"23\" height=\"17\" viewBox=\"0 0 23 17\" focusable=\"false\"><path fillRule=\"nonzero\" d=\"M19.347 8.275l1.88 1.714a.727.727 0 0 0 .98-1.074l-3.225-2.941a.727.727 0 0 0-1.027.047l-2.94 3.224a.727.727 0 0 0 1.075.98l1.802-1.976a6.545 6.545 0 0 1-11.56 4.288.727.727 0 1 0-1.114.935 8 8 0 0 0 14.129-5.197zm-16.039.162l-1.79-1.633a.727.727 0 1 0-.98 1.074l3.223 2.94c.297.272.757.25 1.028-.046l2.94-3.224a.727.727 0 0 0-1.075-.98L4.768 8.636a6.545 6.545 0 0 1 11.555-4.482.727.727 0 1 0 1.114-.936A8 8 0 0 0 3.308 8.437z\"></path></svg></span></button>\n                </div>\n                <div aria-hidden={toggleFlip ? \"false\" : \"true\"} className=\"block-flashcard__back block-flashcard__back--fullimage\" role=\"button\" tabIndex={toggleFlip ? \"0\":\"-1\"}>\n                    <div className=\"block-flashcard__content\" style={bgImageStyle}>\n                        <div className={backStyle} aria-label={`Flashcard back ${source.content}`}>\n                             <div aria-hidden={toggleFlip ? \"false\" : \"true\"} className=\"block-flashcard__description brand--head brand--linkColor\">\n                                <div className=\"fr-view\">\n                                {source.content}\n                                </div>\n                              </div>\n                        </div>\n                    </div>\n                    <button className=\"block-flashcard__flip brand--ui\" tabIndex=\"-1\"><span className=\"flip-text\"></span><span className=\"flip-icon\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"23\" height=\"17\" viewBox=\"0 0 23 17\" focusable=\"false\"><path fillRule=\"nonzero\" d=\"M19.347 8.275l1.88 1.714a.727.727 0 0 0 .98-1.074l-3.225-2.941a.727.727 0 0 0-1.027.047l-2.94 3.224a.727.727 0 0 0 1.075.98l1.802-1.976a6.545 6.545 0 0 1-11.56 4.288.727.727 0 1 0-1.114.935 8 8 0 0 0 14.129-5.197zm-16.039.162l-1.79-1.633a.727.727 0 1 0-.98 1.074l3.223 2.94c.297.272.757.25 1.028-.046l2.94-3.224a.727.727 0 0 0-1.075-.98L4.768 8.636a6.545 6.545 0 0 1 11.555-4.482.727.727 0 1 0 1.114-.936A8 8 0 0 0 3.308 8.437z\"></path></svg></span></button>\n                </div>\n            </div>\n        </section>\n\n        );\n    }\n\n\n}","import React from 'react';\nimport Flashcard from './Flashcard';\n\n\nexport default class Flashcards extends React.Component{\n\n    //Flashcards is a component that takes in an array of structured data\n    //and then outputs individual flashcard components from them\n\n\n    render(){\n        const {source} = this.props;\n        const cardList = source.map(card => <Flashcard key={card.id} source={card}/> )\n        return(\n            <div aria-label=\"Flashcard grid\" className=\"block-flashcards blocks-flashcard--column\" style={{\"paddingTop\": \"30px\", \"paddingBottom\": \"30px\"}}>\n                 <div className=\"block-flashcards__wrapper\">\n                    <div>\n                    {cardList}\n                    </div>\n                </div>\n          </div>\n        );\n    }\n\n}","import React, { Component } from 'react';\nimport Flashcards from './flashcards/Flashcards';\nimport './App.css';\n//getting dummy data from file\nimport dummyData from './dummyData.json';\n\n//take raw JSON and stringify\nconst data = JSON.stringify(dummyData);\n\n//conver to JavaScript Object\nconst sampleData = JSON.parse(data);\n\nclass App extends Component {\n  render() {\n    console.log('sample data',sampleData);\n    return (\n      <div className=\"App\">\n       <Flashcards source={sampleData} />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}